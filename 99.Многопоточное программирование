Процессы - разные адресные пространства, связь между процессами обходится дороже, переключение дороже, больше ограничений.
Потоки - исполняются внутри одного процесса (одной джава-машины).

Поток может находиться в разных состояниях: новый, исполняется, ожидает, приостановлен, прерван.
Приоритет потока - целое число, показывает относительный приоритет потока.

Параллельное исполнение может быть организовано двумя способами:
1) Наследование от класса Thread
2) Имплементация интерфейса Runnable

Главный поток исполнения - метод main. Запускает остальные потоки.
currentThread() - возвращает ссылку на текущий поток исполнения.
Группа потоков исполнения ???

При создании класса для запуска нового потока (через Runnable или наследование класса Thread) нужно переопределить метод run() - в нем находится весь код, который будет исполняться в своем потоке.

Если переопределяется только метод run(), то лучше использовать Runnable, к тому же это позволяет наследоваться от другого класса.
isAlive() - поток работает или нет.
join() - дождаться завершения потока.
setPriority() - установтить приоритет потока.

Монитор - объект для взаимоисключающей блокировки.
Модификатор sinchronized - ставится перед методом, чтобы исключить состояние гонок. В этом случае, если в потоке объекта выполняется такой метод, другой поток не может вызывать этот метод (и все другие с таким модификатором) и ждет. Статические методы тоже могут быть объявлены с таким модификатором. Блокирование одного статического метода блокирует все объявленные с таким модификатором.
sinchronized может быть объявлен перед блоком кода:
sinchronized(ссылка на блокируемый объект) {}

wait() - метод останавливает исполнение потока в объекте, пока не будет вызван метод notify() или notifyAll()

Получить состояние потока (выполняется, ждет и т.д) можно через метод getState()
